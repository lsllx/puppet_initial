#这个脚本是放在cloudstack的虚机模板中的/etc/puppet/目录下的
#作用主要就是接收来自于puppet-master端的命令执行一些操作
require 'open3'
require 'rubygems'
require 'erb'

#这个类主要就是为puppet-agent端的zabbix做初始化准备
class Zabbix_config
  #
  def initialize(dir,server,config={})
    path = "#{dir}"
    erb = "/zabbix_agentd.conf.erb"
    conf ="/zabbix_agentd.conf"
    @zabbix_master = server
    @hostname = "localhost"
    @safe_parameters = 1
    p config
    #读取config中看有没有对应的属性，有则加入到对应的设置中
    if(config.has_key?(:UnsafeUserParameters))
      @safe_parameters = config[:UnsafeUserParameters]
    end
    if(config.has_key?(:Hostname))
      @hostname = config[:Hostname]
    end
    
    init_erb = ERB.new(File.read(path+erb));
    File.delete(path+conf) if File.exist?(path+conf)
    init_conf = File.new(path+conf,"w")
    #如同之前node_manage中的erb使用方法
    init_conf.write(init_erb.result binding)
    init_conf.close
    File.delete(path+erb) if File.exist?(path+erb)
    puts "ok"
  end
end

#这部分组合了许多系统操作，方便puppetmaster端操作
class System_operation
  #这种写法是申明很多类方法时候使用的
  #类方法其实就是java中的静态方法，表示可以直接调用
  class << self
    #这部分是检查hosts文件中有没有puppet-master的dns信息
    def check_master_config(master_hostname,master_ip)
      master_config = "#This file is autogenerated at #{Time.now}. by Scloud. \n#It used to make sure
  master hostname is correctly.\n"
      File.open("/etc/hosts","r") do |file|
        file.readlines.each do |line|
          if(line.start_with? "#") then
          else if(line.include? "puppet") then
                 master_config.concat("#{master_ip}")
                 master_config.concat(" #{master_hostname}\n")
               else
                 master_config.concat(line)
               end
          end
        end
      end
      if !master_config.include? "puppet"
        master_config.concat("#{master_ip}")
        master_config.concat(" #{master_hostname}\n")
      end
      File.delete("/etc/hosts")
      #这种file打开写法和之前的写法不大一致，但是实现的功能很容易看明白
      File.open("/etc/hosts",File::CREAT|File::APPEND|File::WRONLY) do |file|
        file.write(master_config)
        file.close
      end
      puts "Add puppet master host(#{master_hostname},#{master_ip}) to hosts success."
      return 1
    end

    #这部分是为了更改本地的hostname，包括两部分：
    #1.本机现在的hostname，通过执行hostname xxx即可
    #2./etc/sysconfig/network文件中的HOSTNAME字段值，修改即可
    #这样就可以保证虚机在本阶段和重启之后都是会同样修改过的主机名
    def modify_hostname(id="scloud")
      config  = ""
      File.open("/etc/sysconfig/network","r") do |file|
        # puts file.read
        file.readlines.each do |line|
          if(line.include? "HOSTNAME") then
            config.concat("HOSTNAME=")
            config.concat(id)
            config.concat(10)
          else
            config.concat(line)
          end
        end
        file.close
      end
      File.delete("/etc/sysconfig/network")
      File.open("/etc/sysconfig/network",File::CREAT|File::APPEND|File::WRONLY) do |file|
        file.write(config)
        file.close
      end
      puts "Update hostname:#{id}"
      system "hostname #{id}"
      puts "OK!"
      return 1
    end
    #保证puppet是启动的，如果没有启动就启动，如果启动了就忽略
    #popen3是一个ruby的一个执行本地命令的执行方法
    #类似的方法还有很多种，包括：Open2中的popen，eval方法，``，system等，都是不同的执行方法，优劣可以自己查找相关问题
    #关于这种|i,o,e,t|的写法，其实牵扯到ruby中的闭包的概念，之前我也解释过了，这个Open3的popen3方法其实
    #返回的是一个array，这个array中有四个部分，分别是inputStream，outputStream，error，thread，它们对应的意义也可以看出来
    #之后的操作基本都类似于这种的，没什么特别的地方，就不一一赘述
    def ensure_puppet_start
      hostname = `hostname`
      reg = /\A[a-z0-9]{32}/
      return -1 if (hostname =~reg).nil?
      output  = ""
      error = ""
      Open3.popen3("ps -ef | grep puppet") do |i,o,e,t|
        output = o.read
        error = e.read
        if(!error||error.empty?)
         # puts output
         state = nil
          output.each_line do |line|
            if(line.include? "/usr/bin/puppet agent")
              state = line
              break
            end
          end
          if(state)
            puts "puppet agent is already start"
            return  1
          else
            self.puppet_start
           end
        else
          puts  "error:#{error}"
          return -1
        end
      end
    end

    #停止puppet
    def stop_puppet
      Open3.popen3("ps -ef | grep puppet") do |i,o,e,t|
        output = o.read
        error = e.read
        if(!error||error.empty?)
         # puts output
         state = nil
          output.each_line do |line|
            if(line.include? "/usr/bin/puppet agent")
              state = line
              break
            end
          end
          if(state)
            self.puppet_stop "#{state.split(" ")[1]}"
            return  1
          else
            puts "puppet is not running."
            return 0
           end
        else
          puts  "error:#{error}"
          return -1
        end
      end
    end

    def restart_puppet
      output = ""
      error = ""
      Open3.popen3("ps -ef | grep puppet") do |i,o,e,t|
        output = o.read
        error = e.read
        if(!error||error.empty?)
         # puts output
         state = nil
          output.each_line do |line|
            if(line.include? "/usr/bin/puppet agent")
              state = line
              break
            end
          end
          if(state)
            self.puppet_stop "#{state.split(" ")[1]}"
            self.puppet_start
            return  1
          else
           self.puppet_start
           end
        else
          puts  "error:#{error}"
          return -1
        end
      end
    end

    def test_puppet
      output = ""
      error = ""
      Open3.popen3("puppet agent --onetime --no-daemonize --verbose --logdest /var/log/puppet-agentlog") do |i,o,e,t|
        output = o.read
        error = e.read
        if(!error||error.empty?)
          puts output
          return 1
        else
          puts  "error:#{error}"
          return -1
        end
      end
    end
    

    def yum_update
      puts "Start yum update..."
      system "yum update -y"
      return 1
    end

    def zabbix_config(zabbix_dir,zabbix_server,zabbix_config={})
      puts "#{zabbix_dir}/zabbix_agentd.conf.erb";
      if File.exist?("#{zabbix_dir}/zabbix_agentd.conf.erb")&&!zabbix_server.nil?
        zabbix = Zabbix_config.new(zabbix_dir,zabbix_server,zabbix_config)
      end
    end

    protected
    def puppet_stop(pid)
      puts "Stopping puppet agent(pid=#{pid})..." 
      puts system("kill -9 #{pid}")
      puts "Ok!"     
    end

    protected
    def puppet_start
      if File.exist?("/var/run/puppet/agent.pid")
        File.delete("/var/run/puppet/agent.pid")
      end
      begin
        puts "Starting puppet agent..."
        if system "puppet agent --verbose --logdest /var/log/puppet-agentlog"
          puts "OK!"
          return 1
        else
          return -1
        end
      end
    end
    
  end
end

if(ARGV[0])
  case ARGV[0]
  when "check"
    if(ARGV[1]&&ARGV[2])
      if(System_operation.check_master_config(ARGV[1],ARGV[2])<0)
        puts -1
      end
    else
      puts "Unknow paramater master_ip:#{ARGV[1]} , master_hostname:#{ARGV[2]}"
    end
  when "hostname"
    if(ARGV[1])
      if System_operation.modify_hostname(ARGV[1]) <0
        puts -1
      end
    else
      puts "Unknow parameter hostname #{ARGV[1]}"
    end
  when "startpuppet"
    if System_operation.ensure_puppet_start <0
      puts -1
    end
  when "restartpuppet"
    if  System_operation.restart_puppet < 0
      puts -1
    end
  when "stoppuppet"
    if System_operation.stop_puppet < 0
      puts -1
    end
  when "yumupdate"
    if System_operation.yum_update < 0
      puts -1
    end
  when "testpuppet"
    if System_operation.test_puppet < 0
      puts -1
    end
  when "configzabbix"
    dir = ""
    server = nil
    config = Hash.new
    puts "invalid parameter"&&(return -1) if(ARGV.size%2==0)
    ARGV.each_with_index do |arg,index|
      puts arg
      if(index==1)
        dir = ARGV[index]
      else
        if(index==2)
          server = ARGV[index]
        else
          if(index%2==1)
            config_key = ARGV[index].gsub("-","").to_sym;
            config_value = ARGV[index+1];
            config[config_key]  = config_value;
          end
        end
      end
    end
    puts System_operation.zabbix_config(dir,server,config)
else
    puts "Unrecognized operation #{ARGV[0]}."
    puts "You can use this script to :"
    puts "check 'mastername' 'masterip'(matername is the puppet master hostname.masterip is mastert ip)"
    puts "hostname 'hostname' (hostname is the vm hostname)"
    puts "startpuppet (used to start puppet agent)"
    puts "restartpuppet (used to restart puppet agent)"
    puts "yumupdate (used to ensure the system is newest)"
end
else
  puts "You must input the operation."
  puts "You can use this script to :"
  puts "check 'mastername' 'masterip'(matername is the puppet master hostname.masterip is mastert ip.uesd to set puppet master ip and hostname)"
  puts "hostname 'hostname' (hostname is the vm hostname,used to set self hostname)"
  puts "startpuppet (used to start puppet agent)"
  puts "restartpuppet (used to restart puppet agent)"
  puts "yumupdate (used to ensure the system is newest)"
end
