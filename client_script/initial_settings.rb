require 'open3'
require 'rubygems'
require 'erb'

class Zabbix_config
  def initialize(dir,server,config={})
    path = "#{dir}"
    erb = "/zabbix_agentd.conf.erb"
    conf ="/zabbix_agentd.conf"
    @zabbix_master = server
    @hostname = "localhost"
    @safe_parameters = 1
    p config
    if(config.has_key?(:UnsafeUserParameters))
      @safe_parameters = config[:UnsafeUserParameters]
    end
    if(config.has_key?(:Hostname))
      @hostname = config[:Hostname]
    end
    init_erb = ERB.new(File.read(path+erb));
    File.delete(path+conf) if File.exist?(path+conf)
    init_conf = File.new(path+conf,"w")
    init_conf.write(init_erb.result binding)
    init_conf.close
    File.delete(path+erb) if File.exist?(path+erb)
    puts "ok"
  end
end

class System_operation
  class << self
    def check_master_config(master_hostname,master_ip)
      master_config = "#This file is autogenerated at #{Time.now}. by Scloud. \n#It used to make sure
  master hostname is correctly.\n"
      File.open("/etc/hosts","r") do |file|
        file.readlines.each do |line|
          if(line.start_with? "#") then
          else if(line.include? "puppet") then
                 master_config.concat("#{master_ip}")
                 master_config.concat(" #{master_hostname}\n")
               else
                 master_config.concat(line)
               end
          end
        end
      end
      if !master_config.include? "puppet"
        master_config.concat("#{master_ip}")
        master_config.concat(" #{master_hostname}\n")
      end
      File.delete("/etc/hosts")
      File.open("/etc/hosts",File::CREAT|File::APPEND|File::WRONLY) do |file|
        file.write(master_config)
        file.close
      end
      puts "Add puppet master host(#{master_hostname},#{master_ip}) to hosts success."
      return 1
    end

    def modify_hostname(id="scloud")
      config  = ""
      File.open("/etc/sysconfig/network","r") do |file|
        # puts file.read
        file.readlines.each do |line|
          if(line.include? "HOSTNAME") then
            config.concat("HOSTNAME=")
            config.concat(id)
            config.concat(10)
          else
            config.concat(line)
          end
        end
        file.close
      end
      File.delete("/etc/sysconfig/network")
      File.open("/etc/sysconfig/network",File::CREAT|File::APPEND|File::WRONLY) do |file|
        file.write(config)
        file.close
      end
      puts "Update hostname:#{id}"
      system "hostname #{id}"
      puts "OK!"
      return 1
    end

    def ensure_puppet_start
      hostname = `hostname`
      reg = /\A[a-z0-9]{32}/
      return -1 if (hostname =~reg).nil?
      output  = ""
      error = ""
      Open3.popen3("ps -ef | grep puppet") do |i,o,e,t|
        output = o.read
        error = e.read
        if(!error||error.empty?)
         # puts output
         state = nil
          output.each_line do |line|
            if(line.include? "/usr/bin/puppet agent")
              state = line
              break
            end
          end
          if(state)
            puts "puppet agent is already start"
            return  1
          else
            self.puppet_start
           end
        else
          puts  "error:#{error}"
          return -1
        end
      end
    end

    def stop_puppet
      Open3.popen3("ps -ef | grep puppet") do |i,o,e,t|
        output = o.read
        error = e.read
        if(!error||error.empty?)
         # puts output
         state = nil
          output.each_line do |line|
            if(line.include? "/usr/bin/puppet agent")
              state = line
              break
            end
          end
          if(state)
            self.puppet_stop "#{state.split(" ")[1]}"
            return  1
          else
            puts "puppet is not running."
            return 0
           end
        else
          puts  "error:#{error}"
          return -1
        end
      end
    end

    def restart_puppet
      output = ""
      error = ""
      Open3.popen3("ps -ef | grep puppet") do |i,o,e,t|
        output = o.read
        error = e.read
        if(!error||error.empty?)
         # puts output
         state = nil
          output.each_line do |line|
            if(line.include? "/usr/bin/puppet agent")
              state = line
              break
            end
          end
          if(state)
            self.puppet_stop "#{state.split(" ")[1]}"
            self.puppet_start
            return  1
          else
           self.puppet_start
           end
        else
          puts  "error:#{error}"
          return -1
        end
      end
    end

    def test_puppet
      output = ""
      error = ""
      Open3.popen3("puppet agent --onetime --no-daemonize --verbose --logdest /var/log/puppet-agentlog") do |i,o,e,t|
        output = o.read
        error = e.read
        if(!error||error.empty?)
          puts output
          return 1
        else
          puts  "error:#{error}"
          return -1
        end
      end
    end
    

    def yum_update
      puts "Start yum update..."
      system "yum update -y"
      return 1
    end

    def zabbix_config(zabbix_dir,zabbix_server,zabbix_config={})
      puts "#{zabbix_dir}/zabbix_agentd.conf.erb";
      if File.exist?("#{zabbix_dir}/zabbix_agentd.conf.erb")&&!zabbix_server.nil?
        zabbix = Zabbix_config.new(zabbix_dir,zabbix_server,zabbix_config)
      end
    end

    protected
    def puppet_stop(pid)
      puts "Stopping puppet agent(pid=#{pid})..." 
      puts system("kill -9 #{pid}")
      puts "Ok!"     
    end

    protected
    def puppet_start
      if File.exist?("/var/run/puppet/agent.pid")
        File.delete("/var/run/puppet/agent.pid")
      end
      begin
        puts "Starting puppet agent..."
        if system "puppet agent --verbose --logdest /var/log/puppet-agentlog"
          puts "OK!"
          return 1
        else
          return -1
        end
      end
    end
    
  end
end

if(ARGV[0])
  case ARGV[0]
  when "check"
    if(ARGV[1]&&ARGV[2])
      if(System_operation.check_master_config(ARGV[1],ARGV[2])<0)
        puts -1
      end
    else
      puts "Unknow paramater master_ip:#{ARGV[1]} , master_hostname:#{ARGV[2]}"
    end
  when "hostname"
    if(ARGV[1])
      if System_operation.modify_hostname(ARGV[1]) <0
        puts -1
      end
    else
      puts "Unknow parameter hostname #{ARGV[1]}"
    end
  when "startpuppet"
    if System_operation.ensure_puppet_start <0
      puts -1
    end
  when "restartpuppet"
    if  System_operation.restart_puppet < 0
      puts -1
    end
  when "stoppuppet"
    if System_operation.stop_puppet < 0
      puts -1
    end
  when "yumupdate"
    if System_operation.yum_update < 0
      puts -1
    end
  when "testpuppet"
    if System_operation.test_puppet < 0
      puts -1
    end
  when "configzabbix"
    dir = ""
    server = nil
    config = Hash.new
    puts "invalid parameter"&&(return -1) if(ARGV.size%2==0)
    ARGV.each_with_index do |arg,index|
      puts arg
      if(index==1)
        dir = ARGV[index]
      else
        if(index==2)
          server = ARGV[index]
        else
          if(index%2==1)
            config_key = ARGV[index].gsub("-","").to_sym;
            config_value = ARGV[index+1];
            config[config_key]  = config_value;
          end
        end
      end
    end
    puts System_operation.zabbix_config(dir,server,config)
else
    puts "Unrecognized operation #{ARGV[0]}."
    puts "You can use this script to :"
    puts "check 'mastername' 'masterip'(matername is the puppet master hostname.masterip is mastert ip)"
    puts "hostname 'hostname' (hostname is the vm hostname)"
    puts "startpuppet (used to start puppet agent)"
    puts "restartpuppet (used to restart puppet agent)"
    puts "yumupdate (used to ensure the system is newest)"
end
else
  puts "You must input the operation."
  puts "You can use this script to :"
  puts "check 'mastername' 'masterip'(matername is the puppet master hostname.masterip is mastert ip.uesd to set puppet master ip and hostname)"
  puts "hostname 'hostname' (hostname is the vm hostname,used to set self hostname)"
  puts "startpuppet (used to start puppet agent)"
  puts "restartpuppet (used to restart puppet agent)"
  puts "yumupdate (used to ensure the system is newest)"
end
